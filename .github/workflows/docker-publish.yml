name: Docker

on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  MSVC_VERSION: 14.38.33130
  WINSDK_VERSION: 10.0.22621.0
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:

  get-sdk:
    name: Get latest Windows SDK
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      id: windows-sdk-cache
      with:
        path: WindowsSDK.tar.7z
        key: WindowsSDK.tar.7z
    - name: List Windows SDKs
      run: |
        # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
        dir "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\DIA SDK"
        dir "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC"
        dir "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools"
        dir "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC"
        dir "C:\Program Files (x86)\Windows Kits\10"
        dir "C:\Program Files (x86)\Windows Kits\10\Include"
        dir "C:\Program Files (x86)\Windows Kits\10\Lib"
    - name: Get Windows SDK
      if: steps.windows-sdk-cache.outputs.cache-hit != 'true'
      run: |
        mkdir WindowsSDK\VC\Tools\MSVC
        mkdir "WindowsSDK\Windows Kits\10\Include"
        mkdir "WindowsSDK\Windows Kits\10\Lib"
        xcopy "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\DIA SDK" "WindowsSDK\DIA SDK\" /E /I /H /Q
        xcopy "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\${{ env.MSVC_VERSION }}" "WindowsSDK\VC\Tools\MSVC\${{ env.MSVC_VERSION }}\" /E /I /H /Q
        xcopy "C:\Program Files (x86)\Windows Kits\10\Include\${{ env.WINSDK_VERSION }}" "WindowsSDK\Windows Kits\10\Include\${{ env.WINSDK_VERSION }}\" /E /I /H /Q
        xcopy "C:\Program Files (x86)\Windows Kits\10\Lib\${{ env.WINSDK_VERSION }}" "WindowsSDK\Windows Kits\10\Lib\${{ env.WINSDK_VERSION }}\" /E /I /H /Q
        tar -cf WindowsSDK.tar WindowsSDK
        7z a WindowsSDK.tar.7z WindowsSDK.tar
        dir
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        compression-level: 0
        overwrite: true
        path: WindowsSDK.tar.7z
        name: WindowsSDK
  build:
    needs: get-sdk
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: windows-sdk-cache
        with:
          path: WindowsSDK.tar.7z
          key: WindowsSDK.tar.7z

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=msvc-${{ env.MSVC_VERSION }}
            type=raw,value=winsdk-${{ env.WINSDK_VERSION }}
            type=sha

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' && !github.event.repository.private }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
